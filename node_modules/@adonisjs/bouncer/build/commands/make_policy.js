import {
  stubsRoot
} from "../chunk-HGBL64UX.js";
import {
  __name
} from "../chunk-JKJYCBCI.js";

// commands/make_policy.ts
import { slash } from "@poppinss/utils";
import { extname, relative } from "node:path";
import string from "@adonisjs/core/helpers/string";
import { BaseCommand, args, flags } from "@adonisjs/core/ace";
function _ts_decorate(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
  else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
}
__name(_ts_decorate, "_ts_decorate");
function _ts_metadata(k, v) {
  if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
}
__name(_ts_metadata, "_ts_metadata");
var MakePolicy = class extends BaseCommand {
  static {
    __name(this, "MakePolicy");
  }
  static commandName = "make:policy";
  static description = "Make a new bouncer policy class";
  static options = {
    allowUnknownFlags: true
  };
  /**
  * Execute command
  */
  async run() {
    if (this.register === void 0) {
      this.register = await this.prompt.confirm("Do you want to register the policy inside the app/policies/main.ts file?");
    }
    const codemods = await this.createCodemods();
    const { destination } = await codemods.makeUsingStub(stubsRoot, "make/policy/main.stub", {
      flags: this.parsed.flags,
      actions: this.actions?.map((action) => string.camelCase(action)) || [],
      entity: this.app.generators.createEntity(this.name),
      model: this.app.generators.createEntity(this.model || this.name)
    });
    if (!this.register) {
      return;
    }
    const policyRelativePath = slash(relative(this.app.policiesPath(), destination).replace(extname(destination), ""));
    const name = string.pascalCase(policyRelativePath);
    await codemods.registerPolicies([
      {
        name,
        path: `#policies/${policyRelativePath}`
      }
    ]);
  }
};
_ts_decorate([
  args.string({
    description: "Name of the policy file"
  }),
  _ts_metadata("design:type", String)
], MakePolicy.prototype, "name", void 0);
_ts_decorate([
  args.spread({
    description: "Method names to pre-define on the policy",
    required: false
  }),
  _ts_metadata("design:type", Array)
], MakePolicy.prototype, "actions", void 0);
_ts_decorate([
  flags.boolean({
    description: "Auto register the policy inside the app/policies/main.ts file",
    showNegatedVariantInHelp: true,
    alias: "r"
  }),
  _ts_metadata("design:type", Boolean)
], MakePolicy.prototype, "register", void 0);
_ts_decorate([
  flags.string({
    description: "The name of the policy model"
  }),
  _ts_metadata("design:type", String)
], MakePolicy.prototype, "model", void 0);
export {
  MakePolicy as default
};
