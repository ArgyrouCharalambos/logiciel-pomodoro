import {
  stubsRoot
} from "./chunk-HGBL64UX.js";
import {
  AuthorizationResponse,
  Bouncer,
  errors_exports
} from "./chunk-W2GB2PHR.js";
import "./chunk-C34TLEZ2.js";
import {
  __name
} from "./chunk-JKJYCBCI.js";

// configure.ts
async function configure(command) {
  const codemods = await command.createCodemods();
  await codemods.makeUsingStub(stubsRoot, "abilities.stub", {});
  await codemods.makeUsingStub(stubsRoot, "policies.stub", {});
  await codemods.updateRcFile((rcFile) => {
    rcFile.addCommand("@adonisjs/bouncer/commands");
    rcFile.addProvider("@adonisjs/bouncer/bouncer_provider");
  });
  await codemods.makeUsingStub(stubsRoot, "initialize_bouncer_middleware.stub", {
    entity: command.app.generators.createEntity("initialize_bouncer")
  });
  await codemods.registerMiddleware("router", [
    {
      path: "#middleware/initialize_bouncer_middleware"
    }
  ]);
}
__name(configure, "configure");

// src/base_policy.ts
import { defineStaticProperty } from "@poppinss/utils";
var BasePolicy = class {
  static {
    __name(this, "BasePolicy");
  }
  static booted = false;
  static actionsMetaData = {};
  static boot() {
    if (!this.hasOwnProperty("booted")) {
      this.booted = false;
    }
    if (this.booted === false) {
      this.booted = true;
      defineStaticProperty(this, "actionsMetaData", {
        initialValue: {},
        strategy: "inherit"
      });
    }
  }
  /**
  * Set metadata for a action name
  */
  static setActionMetaData(actionName, options) {
    this.boot();
    this.actionsMetaData[actionName] = options;
  }
};

// src/decorators/action.ts
function action(options) {
  return function(target, property) {
    const Policy = target.constructor;
    Policy.boot();
    Policy.setActionMetaData(property, options);
  };
}
__name(action, "action");
function allowGuest() {
  return action({
    allowGuest: true
  });
}
__name(allowGuest, "allowGuest");
export {
  AuthorizationResponse,
  BasePolicy,
  Bouncer,
  action,
  allowGuest,
  configure,
  errors_exports as errors,
  stubsRoot
};
