import type { EmitterLike } from '@adonisjs/core/types/events';
import type { ContainerResolver } from '@adonisjs/core/container';
import { AuthorizationResponse } from './response.js';
import type { LazyImport, Constructor, BouncerEvents, ResponseBuilder, GetPolicyMethods, AuthorizerResponse } from './types.js';
/**
 * Exposes the API to authorize a user using a pre-defined policy
 */
export declare class PolicyAuthorizer<User extends Record<string, string>, Policy extends Constructor<any>> {
    #private;
    constructor(user: User | null, policy: LazyImport<Policy> | Policy, responseBuilder: ResponseBuilder);
    /**
     * Set a container resolver to use for resolving policies
     */
    setContainerResolver(containerResolver?: ContainerResolver<any>): this;
    /**
     * Define the event emitter instance to use for emitting
     * authorization events
     */
    setEmitter(emitter?: EmitterLike<BouncerEvents>): this;
    /**
     * Execute an action from the list of pre-defined actions
     */
    execute<Method extends GetPolicyMethods<User, InstanceType<Policy>>>(action: Method, ...args: InstanceType<Policy>[Method] extends (user: User, ...args: infer Args) => AuthorizerResponse ? Args : never): Promise<AuthorizationResponse>;
    /**
     * Check if a user is allowed to perform an action using
     * one of the known policy methods
     */
    allows<Method extends GetPolicyMethods<User, InstanceType<Policy>>>(action: Method, ...args: InstanceType<Policy>[Method] extends (user: User, ...args: infer Args) => AuthorizerResponse ? Args : never): Promise<boolean>;
    /**
     * Check if a user is denied from performing an action using
     * one of the known policy methods
     */
    denies<Method extends GetPolicyMethods<User, InstanceType<Policy>>>(action: Method, ...args: InstanceType<Policy>[Method] extends (user: User, ...args: infer Args) => AuthorizerResponse ? Args : never): Promise<boolean>;
    /**
     * Authorize a user against a given policy action
     *
     * @throws {@link E_AUTHORIZATION_FAILURE}
     */
    authorize<Method extends GetPolicyMethods<User, InstanceType<Policy>>>(action: Method, ...args: InstanceType<Policy>[Method] extends (user: User, ...args: infer Args) => AuthorizerResponse ? Args : never): Promise<void>;
}
