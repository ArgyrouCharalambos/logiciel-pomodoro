import {
  debug_default
} from "../../chunk-C34TLEZ2.js";
import {
  __name
} from "../../chunk-JKJYCBCI.js";

// src/plugins/edge.ts
var edgePluginBouncer = /* @__PURE__ */ __name((edge) => {
  debug_default("registering bouncer tags with edge");
  edge.registerTag({
    tagName: "can",
    seekable: true,
    block: true,
    compile(parser, buffer, token) {
      const expression = parser.utils.transformAst(parser.utils.generateAST(token.properties.jsArg, token.loc, token.filename), token.filename, parser);
      const openingBrace = expression.type !== "SequenceExpression" ? "(" : "";
      const closingBrace = expression.type !== "SequenceExpression" ? ")" : "";
      const parameters = parser.utils.stringify(expression);
      const methodCall = `can${openingBrace}${parameters}${closingBrace}`;
      buffer.writeStatement(`if (await state.bouncer.${methodCall}) {`, token.filename, token.loc.start.line);
      token.children.forEach((child) => {
        parser.processToken(child, buffer);
      });
      buffer.writeStatement(`}`, token.filename, token.loc.start.line);
    }
  });
  edge.registerTag({
    tagName: "cannot",
    seekable: true,
    block: true,
    compile(parser, buffer, token) {
      const expression = parser.utils.transformAst(parser.utils.generateAST(token.properties.jsArg, token.loc, token.filename), token.filename, parser);
      const openingBrace = expression.type !== "SequenceExpression" ? "(" : "";
      const closingBrace = expression.type !== "SequenceExpression" ? ")" : "";
      const parameters = parser.utils.stringify(expression);
      const methodCall = `cannot${openingBrace}${parameters}${closingBrace}`;
      buffer.writeStatement(`if (await state.bouncer.${methodCall}) {`, token.filename, token.loc.start.line);
      token.children.forEach((child) => {
        parser.processToken(child, buffer);
      });
      buffer.writeStatement(`}`, token.filename, token.loc.start.line);
    }
  });
}, "edgePluginBouncer");
export {
  edgePluginBouncer
};
